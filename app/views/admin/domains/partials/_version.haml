- version ||= false
- domain ||= false

- if version # normal history
  - epp_req = ApiLog::EppLog.find_by(uuid: version.uuid).try(:request) if version.uuid
  - children       = HashWithIndifferentAccess.new(version.prepare_children_history)
  - nameservers    = Nameserver.objects_for(ids: children[:nameservers]&.map(&:id))
  - dnskeys        = Dnskey.objects_for(ids: children[:dnskeys]&.map(&:id))
  - if version.initial?
    - tech_contacts = children[:tech_contacts]
    - admin_contacts = children[:admin_contacts]
    - registrant = children[:registrant]
  - else
    - tech_contacts = Contact.objects_for(ids: children[:tech_contacts]&.map(&:id))
    - admin_contacts = Contact.objects_for(ids: children[:admin_contacts]&.map(&:id))
    - registrant     = Contact.objects_for(ids: children[:registrant]&.map(&:id), initial: version.transfer?)
  - event                   = version.action
  - creator                 = plain_username(version.terminator)

  %td
    %p.nowrap
      = l domain.updated_at

    %p.text-right
      - if (event == 'UPDATE' || event == 'CREATE') && epp_req
        = link_to event, '#', class: 'js-event'
      - else
        = event
      %br
        = creator
    - if version
      %p.text-right
        = link_to "Pure history", admin_domain_version_path(version)

  %td{class: changing_css_class_audit(version,"statuses")}
    %p
      - if domain.statuses.present?
        - domain.statuses.each do |s|
          = s
          - if domain.status_notes.present?
            - notes = domain.status_notes[s]
            - if notes
              %br
              %i= notes
            %br
    - if domain.pending_json.present?
      %p
        = link_to t(:pending_epp), '#', class: 'js-pending'

  %td{class: changing_css_class_audit(version, "period", "period_unit", "valid_to")}
    - if version.renew?
      %p
        = "#{domain.period}#{domain.period_unit}"
        %br
        = "#{l(domain.valid_to, format: :date)}"
  %td
    - Array(registrant).each do |r|
      = last_contact_history_version(contact: r) do
        %p
          = r[:name]
          = r[:phone]
          = r[:email]
        %p
          = r[:code]

  %td
    - Array(admin_contacts).each do |ac|
      = last_contact_history_version(contact: ac) do
        %p
          = ac[:name]
          = ac[:phone]
          = ac[:email]
        %p
          = ac[:code]
    - unless version.initial?
      - if admin_contacts.any? && version.domain_contact_admin_changes.any?
        %hr
      - version.domain_contact_admin_changes.order(action: :desc).each do |admin_change|
        %p
          = last_change_history_version(change: admin_change) do
            = admin_change.contact_code

  %td
    - Array(tech_contacts).each do |tc|
      = last_contact_history_version(contact: tc) do
        %p
          = tc[:name]
          = tc[:phone]
          = tc[:email]
        %p
          = tc[:code]

    - unless version.initial?
      - if tech_contacts.any? && version.domain_contact_tech_changes.any?
        %hr
      - version.domain_contact_tech_changes.order(action: :desc).each do |tech_change|
        %p
          = last_change_history_version(change: tech_change) do
            = tech_change.contact_code

  %td
    %p
      - Array(nameservers).each do |ns|
        %span{class: changing_css_class_action(ns)}
          = ns[:hostname]
          %br
          = ns[:ipv4].presence
          = ns[:ipv6].presence
          %br
  %td
    - Array(dnskeys).each do |ns|
      %p
        %span{class: changing_css_class_action(ns)}
          = ns.flags
          = ns.protocol
          = ns.alg
          - if ns.public_key.present?
            \...#{ns.public_key.to_s[-20,20]}

  %td{class: changing_css_class_audit(version,"registrar_id")}
    - if domain.registrar
      %p
        = link_to admin_registrar_path(domain.registrar), target: "registrar_#{domain.registrar.id}" do
          = domain.registrar.name

  - if (event == 'CREATE' || event == 'UPDATE') && epp_req
    %tr.js-event{ style: 'display: none;' }
      %td{colspan: 9}
        %pre
          = Nokogiri::XML(epp_req)

  - if domain.pending_json.present?
    %tr.js-pending{ style: 'display: none;' }
      %td{colspan: 9}
        = preserve do
          %pre
            - formatted_req = Nokogiri::XML(domain.pending_json['frame'])
            - if formatted_req.errors.none?
              = formatted_req
            - else
              = domain.pending_json['frame']


